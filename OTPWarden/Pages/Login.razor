@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using OTPWarden.Controllers.V1.Contract.Responses;
@using OTPWarden.Services.Abstractions;
@using OTPWarden.Models;
@using System.Net.Http.Json;

@inject ProtectedLocalStorage _protectedLocalStorage
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@inject AppSettings _appSettings
@inject IJSRuntime _jsRuntime

@page "/login"

<PageTitle>Login</PageTitle>

<h1 class="title">Login</h1>

<div class="columns is-gapless">
    <div class="column"></div>

    <div class="column is-narrow">
        <fieldset disabled="@_isLoading">
            <div class="field">
                <p class="control has-icons-left has-icons-right">
                    <input class="input" type="text" placeholder="Email" @bind-value="@_username" @onkeyup="KeyUp">
                    <span class="icon is-small is-left">
                        <i class="fas fa-envelope"></i>
                    </span>
                </p>
            </div>
            <div class="field">
                <p class="control has-icons-left">
                    <input class="input" type="password" placeholder="Password" @bind-value="@_password" @onkeyup="KeyUp">
                    <span class="icon is-small is-left">
                        <i class="fas fa-lock"></i>
                    </span>
                </p>
                @if (_loginFailed)
                {
                    <p class="help is-danger">Login failed.</p>
                }
            </div>
            <div class="field is-grouped is-grouped-right">
                <p class="control">
                    <button class="@LoginButtonClass" @onclick="AuthenticateUser">
                        Login
                    </button>
                </p>
            </div>
        </fieldset>
    </div>

    <div class="column"></div>
</div>

@code {
    private string _username;
    private string _password;
    private bool _isLoading;
    private bool _loginFailed;

    private string LoginButtonClass => _isLoading ? "button is-link is-loading" : "button is-link";

    public async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await AuthenticateUser();
        }
    }

    private async Task AuthenticateUser()
    {
        _isLoading = true;
        _loginFailed = false;

        List<KeyValuePair<string, string>> request = new List<KeyValuePair<string, string>>()
        {
            new KeyValuePair<string, string>("grant_type", "password"),
            new KeyValuePair<string, string>("username", _username),
            new KeyValuePair<string, string>("password", _password)
        };

        _httpClient.DefaultRequestHeaders.UserAgent.TryParseAdd(await _jsRuntime.InvokeAsync<string>("getUserAgent"));
        HttpResponseMessage responseMessage = await _httpClient.PostAsync($"{_appSettings.Host}/api/v1/auth/authenticate", 
            new FormUrlEncodedContent(request));

        if (responseMessage.IsSuccessStatusCode)
        {
            AuthenticateUserApiResponse response = await responseMessage.Content.ReadFromJsonAsync<AuthenticateUserApiResponse>();

            if (response != null)
            {
                await _protectedLocalStorage.SetAsync("AccessToken", response.AccessToken);
                await _protectedLocalStorage.SetAsync("RefreshToken", response.RefreshToken);

                _navigationManager.NavigateTo("/vault", true);
            }
        }
        else
        {
            _isLoading = false;
            _loginFailed = true;
        }
    }
}
