@page "/register"

<PageTitle>Register</PageTitle>

@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using OTPWarden.Controllers.V1.Contract.Requests;
@using OTPWarden.Controllers.V1.Contract.Responses;
@using OTPWarden.Services.Abstractions;
@using OTPWarden.Models;
@using System.Text.Json;
@using System.Net.Http.Json;
@inject ProtectedLocalStorage _protectedLocalStorage
@inject NavigationManager _navigationManager
@inject HttpClient _httpClient
@inject AppSettings _appSettings
@inject IJSRuntime _jsRuntime

<h1 class="title">Register</h1>

<div class="columns is-gapless">
    <div class="column"></div>

    <div class="column is-narrow">
        <fieldset disabled="@_isLoading">
            <div class="field">
                <p class="control has-icons-left has-icons-right">
                    <input class="input" type="text" placeholder="Email" @bind-value="@_username" @onkeyup="KeyUp">
                    <span class="icon is-small is-left">
                        <i class="fas fa-envelope"></i>
                    </span>
                </p>
            </div>
            <div class="field">
                <p class="control has-icons-left">
                    <input class="input" type="password" placeholder="Password" @bind-value="@_password" @onkeyup="KeyUp">
                    <span class="icon is-small is-left">
                        <i class="fas fa-lock"></i>
                    </span>
                </p>
                @if (_registerFailed)
                {
                    <p class="help is-danger">Registration failed.</p>
                }
            </div>
            <div class="field is-grouped is-grouped-right">
                <p class="control">
                    <button class="@RegisterButtonClass" @onclick="RegisterUser">
                        Register
                    </button>
                </p>
            </div>
        </fieldset>
    </div>

    <div class="column"></div>
</div>

@code {
    private string _username;
    private string _password;
    private bool _isLoading;
    private bool _registerFailed;

    private string RegisterButtonClass => _isLoading ? "button is-success is-loading" : "button is-success";

    public async Task KeyUp(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await RegisterUser();
        }
    }

    private async Task RegisterUser()
    {
        _isLoading = true;
        _registerFailed = false;

        _httpClient.DefaultRequestHeaders.UserAgent.TryParseAdd(await _jsRuntime.InvokeAsync<string>("getUserAgent"));

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync($"{_appSettings.Host}/api/v1/auth/register",
            new RegisterUserApiRequest()
                {
                    Email = _username,
                    Password = _password
                });

        if (response.IsSuccessStatusCode)
        {
            AuthenticateUserApiResponse content = await response.Content.ReadFromJsonAsync<AuthenticateUserApiResponse>();

            if (content != null)
            {
                await _protectedLocalStorage.SetAsync("AccessToken", content.AccessToken);
                await _protectedLocalStorage.SetAsync("RefreshToken", content.AccessToken);

                _navigationManager.NavigateTo("/vault", true);
            }
        }
        else
        {
            _isLoading = false;
            _registerFailed = true;
        }
    }
}
